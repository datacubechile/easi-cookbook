# Usage: argo submit easi-wf-gridded-full.yaml

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: easihub
  generateName: samsara-gridded-
  labels:
    name: easi-workflows-gridded
    owner: jhodge
    team: SAMSARA

spec:
  serviceAccountName: data-pipelines-default # TODO Replace with values suitable for your deployment environment.
  entrypoint: start
  onExit: exit-handler
  parallelism: 36 # How many pods can execute simultaneously
  podGC:
    # strategy: OnPodSuccess
    strategy: OnPodCompletion  # delete pods immediately when pod is completed (including errors/failures)
  artifactGC:
    strategy: OnWorkflowDeletion  # default Strategy set here applies to all Artifacts by default
    serviceAccountName: data-pipelines-default
  volumes:
  - name: user-secret-easi-odc-v2 # contains the EASI Hub wide administration secrets to access the database as admin
    secret:
      secretName: user-secret-easi-odc-v2
      items:
        - key: .datacube.conf
          path: .datacube.conf

  arguments:
    parameters:
    - name: product
      value: '["landsat5_c2l2_sr", "landsat7_c2l2_sr", "landsat8_c2l2_sr", "landsat9_c2l2_sr"]'
    - name: odc_query
      # Must include output_crs, resolution, group-by
      value: '{ "output_crs": "epsg:32619", "resolution": [-30, 30], "group_by": "solar_day", "origin": [15,15] }'
    - name: measurements
      # Measurements must be valid for the selected product
      value: '["red", "nir08", "qa_pixel"]'  # json list string.
    - name: output # output artifacts are placed here
      # TODO Replace with values suitable for your deployment environment.
      value: '{"upload": "True", "bucket": "easido-prod-dc-data", "prefix": "staging/samsara/processing/", "final_prefix": "products-index/samsara-raw/"}'
    - name: roi # Region of Interest
      value: '{"time_start": "2010-01-01T00:00:00Z", "time_end": "2025-02-18T00:00:00Z", "boundary": {"coordinates": [[[247407.424332, -3759637.385689], [277867.505096, -3737215.441123], [280596.481831, -3699214.741452], [312309.956532, -3673526.659493], [321108.221115, -3644267.063299], [383199.002609, -3667067.688056], [398501.015932, -3655962.633941], [407600.280836, -3685111.715594], [429887.030715, -3688956.202032], [416885.028641, -3796345.042367], [375214.903656, -3770108.565469], [367636.557411, -3748604.020174], [309184.819133, -3786138.540799], [247407.424332, -3759637.385689]], [[383209.459182, -3667934.985527], [383104.304389, -3668305.530256], [383297.611255, -3669125.142956], [383667.561284, -3668776.244113], [383209.459182, -3667934.985527]]], "crs": {"properties": {"name": "EPSG:32619"}, "type": "name"}, "type": "Polygon"}}'
    - name: size # Tile size in odc_query.output_crs units
      value: 18000
    - name: tiles_per_worker
      value: 1
    - name: dask_workers
      value: 4
    - name: tile_buffer
      value: '[1650, 1650]'
    - name: pelt_params
      value: '{"compute_pelt": "False", "model": "rbf", "min_size": "3", "jump": "5", "penalty": "30", "n_breaks": "5", "start_date": "2016-01-01", "processing_chunk_size": "65"}'
    - name: neighbor_params
      value: '{"compute_neighbors": "False", "way":"last_negative", "neighbor_radius": "50"}'
    - name: texture_params
      value: '{"compute_textures": "False", "smooth_radius": "15", "glcm_radius": "7"}'
    - name: rf_params
      value: '{"compute_rf": "False", "rf_model": "RF_v04_all-trained_negative_of_first.joblib"}'
    - name: finaliser_params
      value: '{"delete_files": "True", "assemble": "False", "finalise": "True", "summarise": "False"}'
    - name: delete_index
      value: "True"
    - name: index
      value: "True"
    - name: dask_image # data-pipeline image to use for Pods
      value: "262301216538.dkr.ecr.us-west-2.amazonaws.com/easi-dask-noml:2023.10.2"
    # IMAGES AND SECRETS
    # - name: wf_image            # Workflow image to use full image name
    #   value: "444488357543.dkr.ecr.us-west-2.amazonaws.com/easi-workflows-base:2024.09.0"
    # DEPLOYMENT
    - name: aws_region
      value: "us-west-2"
    - name: git_image
      # TODO Replace with values suitable for your deployment environment.
      value: alpine/git
    - name: alpine_image
      # TODO Replace with values suitable for your deployment environment.
      value: "262301216538.dkr.ecr.us-west-2.amazonaws.com/ecr-public/docker/library/alpine:latest"
    # ADD A CODE REPOSITORY (if not built in the wf_image)
    - name: package-repo
      value: "https://github.com/datacubechile/easi-cookbook"
    - name: package-branch
      value: "main"
    - name: package-path
      value: "/opt/repo"
    - name: package-secret
      value: ""  # git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

  templates:
  - name: start
    steps:
    - - name: tile-generator
        template: tile-generator
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: odc_query
            value: "{{workflow.parameters.odc_query}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: size
            value: "{{workflow.parameters.size}}"
          - name: tile_buffer
            value: "{{workflow.parameters.tile_buffer}}"
          - name: tiles_per_worker
            value: "{{workflow.parameters.tiles_per_worker}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          - name: aws_region
            value: "{{workflow.parameters.aws_region}}"
          # - name: wf_image
          #   value: "{{workflow.parameters.wf_image}}"
          - name: git_image
            value: "{{workflow.parameters.git_image}}"

    - - name: tile-processor
        template: tile-processor
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: measurements
            value: "{{workflow.parameters.measurements}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: key
            value: "{{item}}"
          - name: dask_workers
            value: "{{workflow.parameters.dask_workers}}"
          - name: tile_buffer
            value: "{{workflow.parameters.tile_buffer}}"
          - name: pelt_params
            value: "{{workflow.parameters.pelt_params}}"
          - name: neighbor_params
            value: "{{workflow.parameters.neighbor_params}}"
          - name: texture_params
            value: "{{workflow.parameters.texture_params}}"
          - name: rf_params
            value: "{{workflow.parameters.rf_params}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          artifacts:
          - name: product_cells
            from: "{{steps.tile-generator.outputs.artifacts.product_cells}}"
        withParam: "{{steps.tile-generator.outputs.parameters.keys}}"
        when: "{{steps.tile-generator.outputs.parameters.process_required}} == True"
    - - name: assembler
        template: assembler
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: odc_query
            value: "{{workflow.parameters.odc_query}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
    - - name: finaliser
        template: finaliser
        arguments:
          parameters:
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: neighbor_params
            value: "{{workflow.parameters.neighbor_params}}"
          - name: dates_idx
            value: "{{item}}"
          - name: latest_date
            value: "{{steps.assembler.outputs.parameters.latest_date}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          artifacts:
            - name: dates
              from: "{{steps.assembler.outputs.artifacts.dates}}"
        withParam: "{{steps.assembler.outputs.parameters.dates_idx}}"
        when: "{{steps.tile-generator.outputs.parameters.finalise_required}} == True"
    - - name: index-delete-raw
        templateRef:
          name: easi-index-delete-template
          template: start
        arguments:
          parameters:
            - name: product
              value: samsara_raw
            - name: order_params_json
              value: '{"start_date": "1980-01-01", "end_date": "2030-12-31"}'
            - name: mode
              value: 'fast-delete'
        when: "{{workflow.parameters.delete_index}} == True"
    - - name: index-delete-summary
        templateRef:
          name: easi-index-delete-template
          template: start
        arguments:
          parameters:
            - name: product
              value: samsara_summary
            - name: order_params_json
              value: '{"start_date": "1980-01-01", "end_date": "2030-12-31"}'
            - name: mode
              value: 'fast-delete'
        when: "{{workflow.parameters.delete_index}} == True"
    - - name: summariser
        template: summariser
        arguments:
          parameters:
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
        when: "{{steps.tile-generator.outputs.parameters.summarise_required}} == True"
    - - name: emailer
        template: emailer
        arguments:
          parameters:
            - name: latest_date
              value: "{{steps.assembler.outputs.parameters.latest_date}}"
            - name: prior_date
              value: "{{steps.assembler.outputs.parameters.prior_date}}"
          artifacts:
            - name: changes
              from: "{{steps.assembler.outputs.artifacts.changes}}"

##--------------------------------
  - name: tile-generator
    inputs:
      parameters:
      - name: product
      - name: odc_query
      - name: roi
      - name: aws_region
      - name: size                  # Tile Size in metres
      - name: tile_buffer           # Tile buffer to add to each tile - must be a [y,x] or (y,x) in CRS units (e.g. metres)
      - name: tiles_per_worker      # Number of tiles to send to a worker for processing
      - name: git_image
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

    outputs:
      parameters:
      - name: keys
        valueFrom:
          path: /tmp/keys.json
      - name: process_required
        valueFrom:
          path: /tmp/process_required
      - name: finalise_required
        valueFrom:
          path: /tmp/finalise_required
      - name: summarise_required
        valueFrom:
          path: /tmp/summarise_required
      artifacts:
      - name: product_cells
        path: /tmp/product_cells.pickle

    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines

    # activeDeadlineSeconds: 300
    retryStrategy:
      limit: "2"
      retryPolicy: "Always"

    volumes:
      - name: git-sync
        emptyDir: {}
      # - name: git-secret
      #   secret:
      #     secretName: "{{inputs.parameters.package-secret}}"
      #     items:
      #       - key: git-credentials
      #         path: .git-credentials

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      # - cd "{{inputs.parameters.package-path}}" &&
      #   git config --global credential.helper "store --file /secret/git/.git-credentials" &&
      #   git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"


    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
        - name: NUMEXPR_MAX_THREADS
          value: '4'
      resources: # limit the resources
        limits:
          memory: 2Gi
          cpu: 2000m
        requests:
          memory: 1Gi
          cpu: 1000m
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
      # - name: git-secret
      #   mountPath: "/secret/git"
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        import sys
        import json
        import logging
        from pathlib import Path

        package_path = "{{inputs.parameters.package-path}}"
        package_repo = "{{inputs.parameters.package-repo}}"
        repo = Path(package_path) / package_repo.split('/')[-1]
        sys.path.insert(1, str(repo))

        logging.basicConfig(level=logging.INFO)

        from tasks.gridded.tile_generator import TileGenerator

        generator = TileGenerator({{inputs.parameters}})
        generator.generate_tiles()

        pelt_params = {{workflow.parameters.pelt_params}}
        neighbor_params = {{workflow.parameters.neighbor_params}}
        texture_params = {{workflow.parameters.texture_params}}
        rf_params = {{workflow.parameters.rf_params}}
        finaliser_params = {{workflow.parameters.finaliser_params}}

        process_required = str(pelt_params['compute_pelt'] == 'True' or neighbor_params['compute_neighbors'] == 'True' or texture_params['compute_textures'] == 'True' or rf_params['compute_rf'] == 'True')
        finalise_required = str(finaliser_params['finalise'] == 'True' or finaliser_params['delete_files'] == 'True')
        summarise_required = str(finaliser_params['summarise'] == 'True')
        
        with open('/tmp/process_required', 'w') as outfile:
            outfile.write(process_required)
        with open('/tmp/finalise_required', 'w') as outfile:
            outfile.write(finalise_required)
        with open('/tmp/summarise_required', 'w') as outfile:
            outfile.write(summarise_required)

        logging.info("Completed tile generation.")

##--------------------------------
  - name: tile-processor
    inputs:
      parameters:
      - name: product
      - name: measurements
      - name: roi
      - name: output
      - name: key
      - name: dask_workers
      - name: tile_buffer
      - name: pelt_params
      - name: neighbor_params
      - name: texture_params
      - name: rf_params
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
      artifacts:
      - name: product_cells
        path: /tmp/product_cells.pickle
    nodeSelector:
      easi.csiro.au/node-purpose: 16vCPU_32Gib
    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines
    # activeDeadlineSeconds: 3540 # Runtime shouldn't exceed 60 minutes - this is here to allow for Dask scheduler lockups or other issues
    retryStrategy:
      limit: "3"
      retryPolicy: "Always"

    volumes:
      - name: git-sync
        emptyDir: {}

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: false
        volumeMounts:
          - name: git-sync
            mountPath: "{{inputs.parameters.package-path}}"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
      resources: # limit the resources
        limits:
          memory: 13Gi
          cpu: 7000m
        requests:
          memory: 13Gi
          cpu: 7000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        if __name__ == "__main__":
          import sys
          import json
          import logging
          from pathlib import Path

          package_path = "{{inputs.parameters.package-path}}"
          package_repo = "{{inputs.parameters.package-repo}}"
          repo = Path(package_path) / package_repo.split('/')[-1]
          sys.path.insert(1, str(repo))

          logging.basicConfig(level=logging.INFO)

          from tasks.gridded.tile_processor import TileProcessor

          processor = TileProcessor({{inputs.parameters}})
          processor.process_tile()
          logging.info("Completed tile processing.")

##--------------------------------
  - name: assembler
    inputs:
      parameters:
      - name: product
      - name: odc_query
      - name: output
      - name: roi
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

    outputs:
      parameters:
      - name: dates_idx
        valueFrom:
          path: /tmp/dates_idx
      - name: latest_date
        valueFrom:
          path: /tmp/latest_date
      - name: prior_date
        valueFrom:
          path: /tmp/prior_date
      artifacts:
      - name: dates
        path: /tmp/dates
      - name: changes
        path: /tmp/changes

    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines

    retryStrategy:
      limit: "3"
      retryPolicy: "Always"

    volumes:
      - name: git-sync
        emptyDir: {}
      - name: git-secret
        secret:
          secretName: azure-devops-easi-hub-git-ro-creds
          items:
            - key: git-credentials
              path: .git-credentials

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        volumeMounts:
          - name: git-secret
            mountPath: "/secret/git"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            mkdir easiwf &&
            cd easiwf &&
            git config --global credential.helper "store --file /secret/git/.git-credentials" &&
            git clone --depth 1 --branch main https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows
      - name: init2
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 14Gi
          cpu: 4000m
        requests:
          memory: 7Gi
          cpu: 2000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        if __name__ == "__main__":
          import sys
          import json
          import logging
          from pathlib import Path
          import time
          time.sleep(24*60*60)

          package_path = "{{inputs.parameters.package-path}}"
          package_repo = "{{inputs.parameters.package-repo}}"
          repo = Path(package_path) / package_repo.split('/')[-1]
          sys.path.insert(1, str(repo))

          logging.basicConfig(level=logging.INFO)

          from tasks.gridded.finaliser import Assemble
          from tasks.common import s3_delete_folder

          package_path        = "{{inputs.parameters.package-path}}"
          package_repo        = "https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows"

          assembler = Assemble({{inputs.parameters}})
          
          finaliser_params = {{workflow.parameters.finaliser_params}}
          
          if finaliser_params['assemble'] == 'True':          
            assembler.assemble()
          else:
            logging.info("Skipping main assembly, preparing dates for next step.")
            assembler.assemble(get_dates_only=True)
          
          if finaliser_params['delete_files'] == 'True':
            output = {{workflow.parameters.output}}
            s3_delete_folder(prefix=output["final_prefix"], bucket=output["bucket"])

##--------------------------------
  - name: finaliser
    inputs:
      parameters:
      - name: output
      - name: neighbor_params
      - name: dates_idx
      - name: latest_date
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
      artifacts:
      - name: dates
        path: /tmp/dates

    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines

    retryStrategy:
      limit: "3"
      retryPolicy: "Always"

    volumes:
      - name: git-sync
        emptyDir: {}
      - name: git-secret
        secret:
          secretName: azure-devops-easi-hub-git-ro-creds
          items:
            - key: git-credentials
              path: .git-credentials

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        volumeMounts:
          - name: git-secret
            mountPath: "/secret/git"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            mkdir easiwf &&
            cd easiwf &&
            git config --global credential.helper "store --file /secret/git/.git-credentials" &&
            git clone --depth 1 --branch main https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows
      - name: init2
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 6Gi
          cpu: 1500m
        requests:
          memory: 6Gi
          cpu: 1200m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        if __name__ == "__main__":
          import sys
          import json
          import logging
          from pathlib import Path
          
          package_path = "{{inputs.parameters.package-path}}"
          package_repo = "{{inputs.parameters.package-repo}}"
          repo = Path(package_path) / package_repo.split('/')[-1]
          sys.path.insert(1, str(repo))

          logging.basicConfig(level=logging.INFO)

          from tasks.gridded.finaliser import Finalise

          finaliser_params = {{workflow.parameters.finaliser_params}}
          
          # TODO: ADD IN DELETER AND INDEX DELETER
          
          if finaliser_params['finalise'] == 'True':
            finaliser = Finalise({{inputs.parameters}})
            finaliser.finalise(latest_date="{{inputs.parameters.latest_date}}")
          else:
            logging.info("Skipping finalisation.")
          
          # TODO: ADD IN INDEXER

  - name: summariser
    inputs:
      parameters:
      - name: output
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines

    retryStrategy:
      limit: "3"
      retryPolicy: "Always"

    volumes:
      - name: git-sync
        emptyDir: {}
      - name: git-secret
        secret:
          secretName: azure-devops-easi-hub-git-ro-creds
          items:
            - key: git-credentials
              path: .git-credentials

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        volumeMounts:
          - name: git-secret
            mountPath: "/secret/git"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            mkdir easiwf &&
            cd easiwf &&
            git config --global credential.helper "store --file /secret/git/.git-credentials" &&
            git clone --depth 1 --branch main https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows
      - name: init2
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 28Gi
          cpu: 7000m
        requests:
          memory: 28Gi
          cpu: 7000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        if __name__ == "__main__":
          import sys
          import json
          import logging
          from pathlib import Path
          
          package_path = "{{inputs.parameters.package-path}}"
          package_repo = "{{inputs.parameters.package-repo}}"
          repo = Path(package_path) / package_repo.split('/')[-1]
          sys.path.insert(1, str(repo))

          logging.basicConfig(level=logging.INFO)

          from tasks.samsara_summarise import Summarise

          finaliser_params = {{workflow.parameters.finaliser_params}}

          if finaliser_params['summarise'] == 'True':
            params_summariser = [
              {'name': 'odc_query', 'value': '{"product": "samsara_raw", "measurements": "mag", "output_crs": "epsg:32619", "resolution": [-30, 30], "group_by": "solar_day", "dask_chunks": {"time":6, "x": 1980,"y": 1980}}'},
              {'name': 'output', 'value': '{"upload": "True", "bucket": "easido-prod-dc-data", "prefix": "products-index/samsara-summary/"}'},
              {'name': 'summary_grid_size', 'value': '1980'},
              {'name': 'new_product', 'value': 'samsara_summary'}
            ]

            if finaliser_params['delete_files'] == 'True':
              delete_files = True
            else:
              delete_files = False

            summariser = Summarise(params_summariser)
            summariser.summarise(delete_files=delete_files)
          else:
            logging.info("Skipping summarising.")

  - name: emailer
    inputs:
      parameters:
      - name: prior_date
      - name: latest_date
      artifacts:
      - name: changes
        path: /tmp/changes

    tolerations:
      - key: easi.csiro.au/dedicated
        operator: Equal
        effect: NoSchedule
        value: data_pipelines
      
    retryStrategy:
      limit: "3"
      retryPolicy: "Always"
    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: IfNotPresent
      env:
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: easi-smtp-server-credentials
              key: SMTP_USERNAME
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: easi-smtp-server-credentials
              key: SMTP_PASSWORD
        - name: SMTP_SERVER
          valueFrom:
            secretKeyRef:
              name: easi-smtp-server-credentials
              key: SMTP_SERVER
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: easi-smtp-server-credentials
              key: SMTP_PORT
      resources: # limit the resources
        limits:
          memory: 2Gi
          cpu: 1000m
        requests:
          memory: 2Gi
          cpu: 1000m
      command: [python]
      source: |
        import sys
        import os
        import smtplib
        import ssl
        from email.message import EmailMessage
        import pandas as pd
        import numpy as np
        import datetime
        from babel.dates import format_date
        from pyproj import Transformer
        import ast
        import base64
        import requests
        import json
        import time
        from io import StringIO
        
        with open('/tmp/changes', "r") as f:
            changes = json.load(f)

        prior_date = "{{inputs.parameters.prior_date}}"
        latest_date = "{{inputs.parameters.latest_date}}"
            
        if len(changes) == 0:
            print("No changes were found, /tmp/changes was empty. No email will be sent.")
            sys.exit(0)
            
        if len(prior_date) == 0:
            print("Prior date was not found, /tmp/prior_date was empty. No email will be sent.")
            sys.exit(0)

        if len(latest_date) == 0:
            print("Current date not found, /tmp/latest_date was empty. No email will be sent.")
            sys.exit(0)

        changes = pd.read_json(StringIO(changes)).sort_values(by=['dates'], ascending=False)
        prior_date = datetime.datetime.strptime(prior_date,'%Y%m%d')
        latest_date = datetime.datetime.strptime(latest_date,'%Y%m%d')
        
        def bool_to_tick(val):
            if val == 1:
                return "✔"
            else:
                return ""
        
        make_maps = True
        
        def generate_map_url(marker_lon, marker_lat, zoomed=False):
            key = "pk_961b27b44ed64dbdb42c5599432c7658"
            width = 150
            height = 100
            lng = -70.627
            lat = -33.604
            zoom = 5
            style = "light"
            scale = 1
            markers = f"lat%3A{marker_lat}%2Clng%3A{marker_lon}"

            if zoomed:
                zoom = 11
                lng = marker_lon
                lat = marker_lat

            url = f"https://api.journey.tech/v1/static-map?key={key}&width={width}&height={height}&lng={lng}&lat={lat}&zoom={zoom}&style={style}&scale={scale}&markers={markers}" if make_maps else ""
            return url

        def xy_to_ll(x, y, crs):
            """
            Converts x and y to latitude and longitude using defaults
            :param x: x
            :param y: y
            :return: Latitude and longitude
            """
            transformer = Transformer.from_crs(crs, 'EPSG:4326', always_xy=True)

            lon, lat = transformer.transform(x, y)

            return lon, lat

        msg = EmailMessage()
        msg['Subject'] = f"SAMSARA - {format_date(latest_date, 'd MMM YYYY', locale='es_CL')} - {len(changes)} cambio{'s'[:len(changes)^1]} detectado{'s'[:len(changes)^1]}"
        msg['From'] = "samsara@datacubechile.cl"
        msg['To'] = "samsara@datacubechile.cl"
        msg['Bcc'] = ["jonathan.hodge@uai.cl","hodge.jonathan@gmail.com"]
        
        # TODO: FIX THIS LINE
        msg.set_content("""\
        Este correo contiene información en formato HTML. No es posible visualizarlo en texto sin formato.
        """)

        html_head = """\
        <html>
            <head>
            <style type="text/css">
                table  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}
                table td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
                font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
                table th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
                font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
                table .head-left{border-color:#9b9b9b;text-align:left;vertical-align:middle}
                table .head-center{border-color:#9b9b9b;text-align:center;vertical-align:middle}
                table .row-center{text-align:center;vertical-align:middle}
                table .row-left{text-align:left;vertical-align:middle}
                table tr.colour td {background-color: #efffff;}
                table tr.white td {background-color: white;}
            </style>
            </head>
            """
        html_start = f"""\
            <body>
                <h3>SAMSARA reporte {format_date(latest_date, 'd MMMM YYYY', locale='es_CL')}</h3>
                
                <p>Durante los ultimos 12 meses, se encontr{'ó' if len(changes) == 1 else 'aron'} <strong>{len(changes)} cambio{'s'[:len(changes)^1]}</strong></p>
                <div>
                    <table class="summary-table">
                        <tbody>
                            <tr>
                                <th class="head-left">Fecha de análisis anterior</th>
                                <td>{format_date(prior_date, 'long', locale='es_CL')}</td>
                            </tr>
                            <tr>
                                <th class="head-left">Fecha de análisis actual</th>
                                <td>{format_date(latest_date, 'long', locale='es_CL')}</td>
                            </tr>
                            <tr>
                                <th class="head-left">Numero de cambios detectados</th>
                                <td>{len(changes)}</td>
                            </tr>
                        </tbody>
                    </table>
                    <p>Cambios detectados podrían incluir nuevos pixeles al lado de cambios detectados anteriormente.</p>
                </div>
                <div>
                    <table class="detail-table">
                        <thead>
                            <tr>
                                <th class="head-left">Fecha</th>
                                <th class="head-center">Magnitud</th>
                                <th class="head-center">Área protegida</th>
                                <th class="head-center">Área prioritaria</th>
                                <th class="head-center">Vecinos (1 día)</th>
                                <th class="head-center">Vecinos (60 días)</th>
                                <th class="head-left">Lugar</th>
                                <th class="head-left">Enlaces</th>
                            </tr>
                        </thead>
                        <tbody>"""
        html_rows = []
        row_date_pre = 0
        tr_colour = True
        for index, row in changes.iterrows(): 
            dt = datetime.datetime.fromtimestamp(row['dates']/1000) # TODO: CHECK THIS
            idx = ast.literal_eval(index)
            lon, lat = xy_to_ll(idx[1], idx[0],'epsg:32619')

            if row_date_pre != row['dates']:
                tr_colour = not tr_colour

            url = generate_map_url(lon, lat)
            try:
                r = requests.get(url)
                time.sleep(1) # Just slow it down a bit
                if r.status_code == 200:
                    data_url = base64.b64encode(r.content).decode('utf-8')
                    data_url = 'data:image/png;base64,' + data_url
                else:
                    print(f"Status code was not 200 for {url}")
                    data_url=""
            except requests.exceptions.RequestException as e:  # This is the correct syntax
                raise SystemExit(e)

            tr_class = "colour" if tr_colour else "white"
            img_block = f'<img src="{data_url}">' if data_url else ""
            # https://samsara.apps.datacubechile.cl/Detalle?geo={row['geohash']}&dt={dt.strftime('%Y-%m-%d')}&zoom=16
            html_rows.append(f"""
                <tr class="{tr_class}">
                    <td class="row-left">{dt.strftime('%d/%m/%Y')}</td>
                    <td class="row-center">{np.round(row['mag'],2)}</td>
                    <td class="row-center">{bool_to_tick(row['areas_protegidas'])}</td>
                    <td class="row-center">{bool_to_tick(row['sitios_prioritarios'])}</td>
                    <td class="row-center">{row['rep_1d'] if row['rep_1d'] > 0 else ""}</td>
                    <td class="row-center">{row['rep_60d'] if row['rep_60d'] > 0 else ""}</td>
                    <td class="row-center">{img_block}</td>
                    <td class="row-left">
                        <p><a href="" target="_blank">Ver en SAMSARA</a></p>
                        <p><a href="https://maps.google.com/maps/place/{lat},{lon}/@{lat},{lon},15z/data=!3m1!1e3" target="_blank">Ver en Google Maps</a></p>
                    </td>
                </tr>
            """)
            row_date_pre = row['dates']

        html_end = "</tbody></table></div></body></html>"
        html = html_head + html_start + "".join(html_rows) + html_end
        msg.add_alternative(html, subtype='html')
        msg.add_header('reply-to', 'jonathan.hodge@uai.cl')

        server=os.getenv('SMTP_SERVER')
        username=os.getenv('SMTP_USERNAME')
        password=os.getenv('SMTP_PASSWORD')
        port=os.getenv('SMTP_PORT')

        context = ssl.create_default_context()
        server = smtplib.SMTP_SSL(server, port, context=context)

        server.login(username,password)
        server.send_message(msg)

##--------------------------------
  # Exit handler templates
  # After the completion of the entrypoint template, the status of the
  # workflow is made available in the global variable {{workflow.status}}.
  # {{workflow.status}} will be one of: Succeeded, Failed, Error
  - name: exit-handler
    steps:
    - - name: celebrate
        template: celebrate
        when: "{{workflow.status}} == Succeeded"
      - name: cry
        template: cry
        when: "{{workflow.status}} != Succeeded"

##--------------------------------
# Option exists to send a notification somewhere
  - name: celebrate
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo hooray!"]

##--------------------------------
  - name: cry
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo boohoo!"]
