# Usage: argo submit easi-wf-gridded-full.yaml

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: easihub
  generateName: samsara-gridded-
  labels:
    name: easi-workflows-gridded
    owner: jhodge

spec:
  serviceAccountName: data-pipelines-default # TODO Replace with values suitable for your deployment environment.
  entrypoint: start
  onExit: exit-handler
  parallelism: 25 # How many pods can execute simultaneously
  podGC:
    # strategy: OnPodSuccess
    strategy: OnPodCompletion  # delete pods immediately when pod is completed (including errors/failures)
  artifactGC:
    strategy: OnWorkflowDeletion  # default Strategy set here applies to all Artifacts by default
    serviceAccountName: data-pipelines-default
  volumes:
  - name: user-secret-easi-odc-v2 # contains the EASI Hub wide administration secrets to access the database as admin
    secret:
      secretName: user-secret-easi-odc-v2
      items:
        - key: .datacube.conf
          path: .datacube.conf

  arguments:
    parameters:
    - name: product
      value: '["landsat5_c2l2_sr", "landsat7_c2l2_sr", "landsat8_c2l2_sr", "landsat9_c2l2_sr"]'
    - name: odc_query
      # Must include output_crs, resolution, group-by
      value: '{ "output_crs": "epsg:32619", "resolution": [-30, 30], "group_by": "solar_day", "origin": [15,15] }'
    - name: measurements
      # Measurements must be valid for the selected product
      value: '["red", "nir08", "qa_pixel"]'  # json list string.
    - name: output # output artifacts are placed here
      # TODO Replace with values suitable for your deployment environment.
      value: '{"upload": "True", "bucket": "easido-prod-dc-data", "prefix": "staging/samsara/processing/", "final-prefix": "products-index/samsara-raw/"}'
    - name: roi # Region of Interest
      value: '{"time_start": "2010-01-01T00:00:00Z", "time_end": "2024-02-15T00:00:00Z", "boundary": {"coordinates": [[[247407.424332, -3759637.385689], [277867.505096, -3737215.441123], [280596.481831, -3699214.741452], [312309.956532, -3673526.659493], [321108.221115, -3644267.063299], [383199.002609, -3667067.688056], [398501.015932, -3655962.633941], [407600.280836, -3685111.715594], [429887.030715, -3688956.202032], [416885.028641, -3796345.042367], [375214.903656, -3770108.565469], [367636.557411, -3748604.020174], [309184.819133, -3786138.540799], [247407.424332, -3759637.385689]], [[383209.459182, -3667934.985527], [383104.304389, -3668305.530256], [383297.611255, -3669125.142956], [383667.561284, -3668776.244113], [383209.459182, -3667934.985527]]], "crs": {"properties": {"name": "EPSG:32619"}, "type": "name"}, "type": "Polygon"}}'
    - name: size # Tile size in odc_query.output_crs units
      value: 18000
    - name: tiles_per_worker
      value: 2
    - name: dask_workers
      value: 4
    - name: tile_buffer
      value: '[1650, 1650]'
    - name: pelt_params
      value: '{"compute_pelt": "False", "model": "rbf", "min_size": "3", "jump": "5", "penalty": "30", "n_breaks": "5", "start_date": "2016-01-01", "processing_chunk_size": "65"}'
    - name: neighbor_params
      value: '{"compute_neighbors": "False", "ways":["last_negative"], "neighbor_radius": "50"}'
    - name: texture_params
      value: '{"compute_textures": "False", "smooth_radius": "15", "glcm_radius": "7"}'
    - name: rf_params
      value: '{"compute_rf": "False", "rf_model": "RF_v03_all-trained_negative_of_first.joblib"}'
    - name: dask_image # data-pipeline image to use for Pods
      value: "444488357543.dkr.ecr.us-west-2.amazonaws.com/easi-dask-noml:2023.10.2"
    # IMAGES AND SECRETS
    - name: wf_image            # Workflow image to use full image name
      value: "444488357543.dkr.ecr.us-west-2.amazonaws.com/easi-workflows-base:main.latest"
    # DEPLOYMENT
    - name: aws_region
      value: "us-west-2"
    - name: git_image
      # TODO Replace with values suitable for your deployment environment.
      value: "262301216538.dkr.ecr.us-west-2.amazonaws.com/alpine/git:latest"
    - name: alpine_image
      # TODO Replace with values suitable for your deployment environment.
      value: "262301216538.dkr.ecr.us-west-2.amazonaws.com/ecr-public/docker/library/alpine:latest"
    # ADD A CODE REPOSITORY (if not built in the wf_image)
    - name: package-repo
      value: "https://github.com/datacubechile/easi-cookbook"
    - name: package-branch
      value: "main"
    - name: package-path
      value: "/opt/repo"
    - name: package-secret
      value: ""  # git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

  templates:
  - name: start
    steps:
    - - name: tile-generator
        template: tile-generator
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: odc_query
            value: "{{workflow.parameters.odc_query}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: size
            value: "{{workflow.parameters.size}}"
          - name: tile_buffer
            value: "{{workflow.parameters.tile_buffer}}"
          - name: tiles_per_worker
            value: "{{workflow.parameters.tiles_per_worker}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          - name: aws_region
            value: "{{workflow.parameters.aws_region}}"
          - name: wf_image
            value: "{{workflow.parameters.wf_image}}"
          - name: git_image
            value: "{{workflow.parameters.git_image}}"

    - - name: tile-processor
        template: tile-processor
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: measurements
            value: "{{workflow.parameters.measurements}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: key
            value: "{{item}}"
          - name: dask_workers
            value: "{{workflow.parameters.dask_workers}}"
          - name: tile_buffer
            value: "{{workflow.parameters.tile_buffer}}"
          - name: pelt_params
            value: "{{workflow.parameters.pelt_params}}"
          - name: neighbor_params
            value: "{{workflow.parameters.neighbor_params}}"
          - name: texture_params
            value: "{{workflow.parameters.texture_params}}"
          - name: rf_params
            value: "{{workflow.parameters.rf_params}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          artifacts:
          - name: product_cells
            from: "{{steps.tile-generator.outputs.artifacts.product_cells}}"
        withParam: "{{steps.tile-generator.outputs.parameters.keys}}"
    - - name: assembler
        template: assembler
        arguments:
          parameters:
          - name: product
            value: "{{workflow.parameters.product}}"
          - name: odc_query
            value: "{{workflow.parameters.odc_query}}"
          - name: roi
            value: "{{workflow.parameters.roi}}"
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
    - - name: finaliser
        template: finaliser
        arguments:
          parameters:
          - name: output
            value: "{{workflow.parameters.output}}"
          - name: way
            value: "{{steps.assembler.outputs.parameters.way}}"
          - name: dates_idx
            value: "{{item}}"
          - name: package-repo
            value: "{{workflow.parameters.package-repo}}"
          - name: package-branch
            value: "{{workflow.parameters.package-branch}}"
          - name: package-path
            value: "{{workflow.parameters.package-path}}"
          - name: package-secret
            value: "{{workflow.parameters.package-secret}}"
          artifacts:
            - name: dates
              from: "{{steps.assembler.outputs.artifacts.dates}}"
        withParam: "{{steps.assembler.outputs.parameters.dates_idx}}"

##--------------------------------
  - name: tile-generator
    inputs:
      parameters:
      - name: product
      - name: odc_query
      - name: roi
      - name: aws_region
      - name: size                  # Tile Size in metres
      - name: tile_buffer           # Tile buffer to add to each tile - must be a [y,x] or (y,x) in CRS units (e.g. metres)
      - name: tiles_per_worker      # Number of tiles to send to a worker for processing
      - name: git_image
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)

    outputs:
      parameters:
      - name: keys
        valueFrom:
          path: /tmp/keys.json
      artifacts:
      - name: product_cells
        path: /tmp/product_cells.pickle

    # activeDeadlineSeconds: 300
    retryStrategy:
      limit: "2"

    volumes:
      - name: git-sync
        emptyDir: {}
      # - name: git-secret
      #   secret:
      #     secretName: "{{inputs.parameters.package-secret}}"
      #     items:
      #       - key: git-credentials
      #         path: .git-credentials

    initContainers:
      - name: init1
        image: "{{inputs.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      # - cd "{{inputs.parameters.package-path}}" &&
      #   git config --global credential.helper "store --file /secret/git/.git-credentials" &&
      #   git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"


    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: Always
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      resources: # limit the resources
        limits:
          memory: 2Gi
          cpu: 2000m
        requests:
          memory: 1Gi
          cpu: 1000m
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
      # - name: git-secret
      #   mountPath: "/secret/git"
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        import sys
        import json
        import logging
        from pathlib import Path

        package_path = "{{inputs.parameters.package-path}}"
        package_repo = "{{inputs.parameters.package-repo}}"
        repo = Path(package_path) / package_repo.split('/')[-1]
        sys.path.insert(1, str(repo))

        logging.basicConfig(level=logging.INFO)

        from tasks.gridded.tile_generator import TileGenerator

        generator = TileGenerator({{inputs.parameters}})
        generator.generate_tiles()

        logging.info("Completed tile generation.")

##--------------------------------
  - name: tile-processor
    inputs:
      parameters:
      - name: product
      - name: measurements
      - name: roi
      - name: output
      - name: key
      - name: dask_workers
      - name: tile_buffer
      - name: pelt_params
      - name: neighbor_params
      - name: texture_params
      - name: rf_params
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
      artifacts:
      - name: product_cells
        path: /tmp/product_cells.pickle

    # activeDeadlineSeconds: 3540 # Runtime shouldn't exceed 60 minutes - this is here to allow for Dask scheduler lockups or other issues
    retryStrategy:
      limit: "3"

    volumes:
      - name: git-sync
        emptyDir: {}
      # - name: git-secret
      #   secret:
      #     secretName: "{{inputs.parameters.package-secret}}"
      #     items:
      #       - key: git-credentials
      #         path: .git-credentials

    initContainers:
      - name: init0
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: false
        volumeMounts:
          - name: git-sync
            mountPath: "{{inputs.parameters.package-path}}"
          # - name: git-secret
          #   mountPath: "/secret/git"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
          # - cd "{{inputs.parameters.package-path}}" &&
          #   git config --global credential.helper "store --file /secret/git/.git-credentials" &&
          #   git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: false
        volumeMounts:
          - name: git-sync
            mountPath: "{{inputs.parameters.package-path}}"
          # - name: git-secret
          #   mountPath: "/secret/git"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git
          # - cd "{{inputs.parameters.package-path}}" &&
          #   git config --global credential.helper "store --file /secret/git/.git-credentials" &&
          #   git clone --depth 1 --branch "{{inputs.parameters.package-branch}}" "{{inputs.parameters.package-repo}}"

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: Always
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 2Gi #32Gi
          cpu: 2000m #8000m
        requests:
          memory: 1Gi #26Gi
          cpu: 1000m #7000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        if __name__ == "__main__":
          import sys
          import json
          import logging
          from pathlib import Path

          package_path = "{{inputs.parameters.package-path}}"
          package_repo = "{{inputs.parameters.package-repo}}"
          repo = Path(package_path) / package_repo.split('/')[-1]
          sys.path.insert(1, str(repo))

          logging.basicConfig(level=logging.INFO)

          from tasks.gridded.tile_processor import TileProcessor

          processor = TileProcessor({{inputs.parameters}})
          processor.process_tile()
          logging.info("Completed tile processing.")

##--------------------------------
  - name: assembler
    inputs:
      parameters:
      - name: product
      - name: odc_query
      - name: output
      - name: roi
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
    
    outputs:
      parameters:
      - name: way
        valueFrom:
          path: /tmp/way
      - name: dates_idx
        valueFrom:
          path: /tmp/dates_idx
      artifacts:
      - name: dates
        path: /tmp/dates

    retryStrategy:
      limit: "3"

    volumes:
      - name: git-sync
        emptyDir: {}
      - name: git-secret
        secret:
          secretName: azure-devops-easi-hub-git-ro-creds
          items:
            - key: git-credentials
              path: .git-credentials

    initContainers:
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            mkdir easiwf
            cd easiwf
            git config --global credential.helper "store --file /secret/git/.git-credentials" &&
            git clone --depth 1 --branch main https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: false
        volumeMounts:
          - name: git-sync
            mountPath: "{{inputs.parameters.package-path}}"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: Always
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 8Gi
          cpu: 8000m
        requests:
          memory: 2Gi
          cpu: 2000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        import sys
        from pathlib import Path
        sys.path.insert(1, '/home/jovyan/SAMSARA/easi-cookbook')
        from tasks.gridded.finaliser import Assemble

        package_path        = "{{inputs.parameters.package-path}}"
        package_repo        = "https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows"
        
        repo = Path(package_path) / 'easiwf' / package_repo.split('/')[-1] / 'tasks' / 'eo3assemble'
        sys.path.insert(1, str(eo3assemble))
        
        assembler = Assemble(params_assembler)
        assembler.assemble()

##--------------------------------
  - name: finaliser
    inputs:
      parameters:
      - name: output
      - name: way
      - name: dates_idx
      - name: package-repo          # A sidecar package repo
      - name: package-branch        # The sidecar package repo branch
      - name: package-path          # Top level dir in which sidecar package will be downloaded to, e.g. {{package-path}}/easi-workflows
      - name: package-secret        # Git-credentials format, e.g. git-credentials: $(echo -n "https://username:password@dev.azure.com | base64)
      artifacts:
      - name: dates
        path: /tmp/dates

    retryStrategy:
      limit: "3"

    volumes:
      - name: git-sync
        emptyDir: {}
      - name: git-secret
        secret:
          secretName: azure-devops-easi-hub-git-ro-creds
          items:
            - key: git-credentials
              path: .git-credentials

    initContainers:
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: true
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            mkdir easiwf
            cd easiwf
            git config --global credential.helper "store --file /secret/git/.git-credentials" &&
            git clone --depth 1 --branch main https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows
      - name: init1
        image: "{{workflow.parameters.git_image}}"
        imagePullPolicy: IfNotPresent
        mirrorVolumeMounts: false
        volumeMounts:
          - name: git-sync
            mountPath: "{{inputs.parameters.package-path}}"
        command: [/bin/sh, -c]
        args:
          - cd "{{inputs.parameters.package-path}}" &&
            git clone --depth 1 --branch jhodge-edits https://github.com/Data-Observatory/lib-samsara.git

    script:
      image: "{{workflow.parameters.dask_image}}"
      imagePullPolicy: Always
      env:
        - name: AWS_METADATA_SERVICE_TIMEOUT
          value: '30'
        - name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
          value: '5'
        - name: DATACUBE_CONFIG_PATH
          value: "/root/.user-secret-easi-odc-v2/.datacube.conf"
      volumeMounts:
        - name: user-secret-easi-odc-v2
          mountPath: '/root/.user-secret-easi-odc-v2'
          readOnly: true
        - name: git-sync
          mountPath: "{{inputs.parameters.package-path}}"
        # - name: git-secret
        #   mountPath: "/secret/git"
      resources: # limit the resources
        limits:
          memory: 8Gi
          cpu: 8000m
        requests:
          memory: 2Gi
          cpu: 2000m
      workingDir: "{{inputs.parameters.package-path}}"
      command: [python]
      source: |
        import sys
        from pathlib import Path
        sys.path.insert(1, '/home/jovyan/SAMSARA/easi-cookbook')
        from tasks.gridded.finaliser import Finalise

        package_path        = "{{inputs.parameters.package-path}}"
        package_repo        = "https://dev.azure.com/csiro-easi/easi-hub-partners/_git/easi-workflows"
        
        repo = Path(package_path) / 'easiwf' / package_repo.split('/')[-1] / 'tasks' / 'eo3assemble'
        sys.path.insert(1, str(eo3assemble))
        
        finaliser = Finalise(params_finaliser)
        finaliser.finalise()


      
##--------------------------------
  # Exit handler templates
  # After the completion of the entrypoint template, the status of the
  # workflow is made available in the global variable {{workflow.status}}.
  # {{workflow.status}} will be one of: Succeeded, Failed, Error
  - name: exit-handler
    steps:
    - - name: celebrate
        template: celebrate
        when: "{{workflow.status}} == Succeeded"
      - name: cry
        template: cry
        when: "{{workflow.status}} != Succeeded"

##--------------------------------
# Option exists to send a notification somewhere
  - name: celebrate
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo hooray!"]

##--------------------------------
  - name: cry
    container:
      image: "{{workflow.parameters.alpine_image}}"
      command: [sh, -c]
      args: ["echo boohoo!"]
